<?php

namespace App\Filament\Resources;

use App\Filament\Resources\FinancialFreedomCommissionTierResource\Pages;
use App\Filament\Resources\FinancialFreedomCommissionTierResource\RelationManagers;
use App\Models\FinancialFreedomCommissionTier;
use App\Models\Rank; // Importar el modelo Rank
use Filament\Forms;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Toggle;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Columns\IconColumn;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;

class FinancialFreedomCommissionTierResource extends Resource
{
    protected static ?string $model = FinancialFreedomCommissionTier::class;

    protected static ?string $navigationIcon = 'heroicon-o-table-cells'; // Icono sugerido
    protected static ?string $navigationGroup = 'Configuraciones MLM';
    protected static ?string $modelLabel = 'Nivel de Comisión Libertad Financiera';
    protected static ?string $pluralModelLabel = 'Niveles de Comisión Libertad Financiera';
    protected static ?int $navigationSort = 3; // Ajustar según necesidad

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Select::make('rank_id')
                    ->label('Rango')
                    ->options(Rank::all()->pluck('name', 'id')) // Asume que Rank tiene 'name'
                    ->searchable()
                    ->required()
                    ->unique(ignoreRecord: true, table: 'financial_freedom_commission_tiers'), // Cada rango solo puede tener una entrada
                TextInput::make('max_points_for_rank')
                    ->label('Puntos Máximos para el Rango')
                    ->numeric()
                    ->required()
                    ->minValue(0),
                TextInput::make('percentage')
                    ->label('Porcentaje de Comisión')
                    ->numeric()
                    ->step(0.0001) // Para precisión como 0.1400 (14%)
                    ->minValue(0)
                    ->maxValue(1) // El porcentaje se guarda como decimal (0.00 a 1.00)
                    ->helperText('Ej: 0.14 para 14%, 0.05 para 5%')
                    ->required(),
                Toggle::make('is_active')
                    ->label('Activo')
                    ->default(true),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                TextColumn::make('rank.name') // Muestra el nombre del rango
                    ->label('Rango')
                    ->searchable()
                    ->sortable(),
                TextColumn::make('max_points_for_rank')
                    ->label('Puntos Máximos')
                    ->sortable(),
                TextColumn::make('percentage')
                    ->label('Porcentaje Comisión')
                    ->formatStateUsing(fn (string $state): string => number_format((float)$state * 100, 2) . '%') // Formatear para mostrar como X.XX%
                    ->sortable(),
                IconColumn::make('is_active')->label('Activo')->boolean(),
                TextColumn::make('created_at')->label('Creado')->dateTime()->sortable()->toggleable(isToggledHiddenByDefault: true),
                TextColumn::make('updated_at')->label('Actualizado')->dateTime()->sortable()->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                //
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
                Tables\Actions\ViewAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }
    
    public static function getRelations(): array
    {
        return [
            //
        ];
    }
    
    public static function getPages(): array
    {
        return [
            'index' => Pages\ListFinancialFreedomCommissionTiers::route('/'),
            'create' => Pages\CreateFinancialFreedomCommissionTier::route('/create'),
            'edit' => Pages\EditFinancialFreedomCommissionTier::route('/{record}/edit'),
            // 'view' => Pages\ViewFinancialFreedomCommissionTier::route('/{record}'), // View page not generated by default
        ];
    }
}
